import java.util.*;

public class demo {
    static List<String> source = Arrays.asList(
        "LOAD A",
        "MACRO ABC",
        "LOAD p",
        "SUB q",
        "MEND",
        "STORE B",
        "MULT D",
        "MACRO ADD1 ARG",
        "LOAD X",
        "STORE ARG",
        "MEND",
        "LOAD B",
        "MACRO ADD5 A1,A2,A3",
        "STORE A2",
        "ADD1 5",
        "ADD1 10",
        "LOAD A1",
        "LOAD A3",
        "MEND",
        "ADD1 t",
        "ABC",
        "ADD5 D1,D2,D3",
        "END"
    );

    static List<String> intermediateCode = new ArrayList<>();

    public static void main(String[] args) {
        boolean inMacro = false;

        for (String line : source) {
            line = line.trim();
            if (line.startsWith("MACRO")) {
                inMacro = true;
            } else if (line.equals("MEND")) {
                inMacro = false;
            } else if (!inMacro) {
                intermediateCode.add(line);
            }
        }

        System.out.println("Intermediate Code:");
        intermediateCode.forEach(System.out::println);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Two-Pass Macro Processor

# Sample code as input
code = [
    "LOAD A",
    "MACRO ABC",
    "LOAD p",
    "SUB q",
    "MEND",
    "STORE B",
    "MULT D",
    "MACRO ADD1 ARG",
    "LOAD X",
    "STORE ARG",
    "MEND",
    "LOAD B",
    "MACRO ADD5 A1, A2, A3",
    "STORE A2",
    "ADD1 5",
    "ADD1 10",
    "LOAD A1",
    "LOAD A3",
    "MEND",
    "ADD1 t",
    "ABC",
    "ADD5 D1, D2, D3",
    "END"
]

# Tables
MNT = {}  # Macro Name Table
MDT = []  # Macro Definition Table
ALA = {}  # Argument List Array (for each macro)

# Pass 1 - Macro Definition Processing
def pass1(code):
    i = 0
    while i < len(code):
        line = code[i]
        tokens = line.strip().split()
        if tokens[0] == "MACRO":
            macro_name = tokens[1]
            MNT[macro_name] = len(MDT)
            ALA[macro_name] = tokens[2:] if len(tokens) > 2 else []

            i += 1
            while "MEND" not in code[i]:
                mline = code[i]
                for idx, arg in enumerate(ALA[macro_name]):
                    mline = mline.replace(arg, f"#ARG{idx}")
                MDT.append(mline)
                i += 1
            MDT.append("MEND")
        i += 1

# Pass 2 - Macro Expansion
def pass2(code):
    i = 0
    intermediate_code = []
    while i < len(code):
        line = code[i].strip()
        tokens = line.split()

        if tokens[0] == "MACRO":
            while "MEND" not in code[i]:
                i += 1
            i += 1
            continue

        elif tokens[0] in MNT:
            macro_name = tokens[0]
            actual_args = tokens[1:] if len(tokens) > 1 else []
            mdt_index = MNT[macro_name]

            arg_map = {}
            for idx, val in enumerate(actual_args):
                arg_map[f"#ARG{idx}"] = val

            mdt_ptr = mdt_index
            while MDT[mdt_ptr] != "MEND":
                expanded_line = MDT[mdt_ptr]
                for key, val in arg_map.items():
                    expanded_line = expanded_line.replace(key, val)
                intermediate_code.append(expanded_line)
                mdt_ptr += 1
        else:
            intermediate_code.append(line)
        i += 1

    return intermediate_code

# Run passes
pass1(code)
intermediate_code = pass2(code)

# Output the intermediate code
print("Intermediate Code:")
for line in intermediate_code:
    print(line)
