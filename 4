import java.util.*;

public class Main {

    static class Symbol {
        String name;
        int address;

        Symbol(String name, int address) {
            this.name = name;
            this.address = address;
        }
    }

    static Map<String, Symbol> symbolTable = new LinkedHashMap<>();
    static List<String[]> intermediateCode = new ArrayList<>();
    static List<String> inputLines = new ArrayList<>();

    static Map<String, String> opcodeTable = new HashMap<>();
    static int locationCounter = 0;

    static void initOpcodes() {
        opcodeTable.put("READ", "01");
        opcodeTable.put("MOVER", "02");
        opcodeTable.put("SUB", "03");
        opcodeTable.put("STOP", "04");
        opcodeTable.put("START", "05");
        opcodeTable.put("END", "06");
        opcodeTable.put("DS", "07");
    }

    static void passOne() {
        for (String line : inputLines) {
            line = line.trim();
            if (line.isEmpty()) continue;

            String[] parts = line.split("\\s+|,\\s*");

            if (parts[0].equals("START")) {
                locationCounter = Integer.parseInt(parts[1]);
                intermediateCode.add(new String[] { String.valueOf(locationCounter), "START", parts[1] });
                continue;
            }

            // Label handling
            if (parts.length > 1 && !opcodeTable.containsKey(parts[0])) {
                String label = parts[0];
                symbolTable.put(label, new Symbol(label, locationCounter));
                parts = Arrays.copyOfRange(parts, 1, parts.length); // drop label
            }

            // DS directive
            if (parts[0].equals("DS")) {
                intermediateCode.add(new String[] { String.valueOf(locationCounter), "DS", "1" });
                locationCounter++;
                continue;
            }

            // END directive
            if (parts[0].equals("END")) {
                intermediateCode.add(new String[] { String.valueOf(locationCounter), "END" });
                continue;
            }

            // General instructions
            String[] codeLine = new String[3];
            codeLine[0] = String.valueOf(locationCounter);
            codeLine[1] = parts[0];
            codeLine[2] = (parts.length > 2) ? parts[1] + "," + parts[2] : (parts.length > 1 ? parts[1] : "");
            intermediateCode.add(codeLine);
            locationCounter++;
        }
    }

    static void passTwo() {
        System.out.println("Intermediate Code:");
        for (String[] code : intermediateCode) {
            StringBuilder line = new StringBuilder();
            line.append(code[0]).append(" ");

            if (opcodeTable.containsKey(code[1])) {
                line.append("(").append(opcodeTable.get(code[1])).append(") ");
            } else {
                line.append(code[1]).append(" ");
            }

            if (code.length > 2 && code[2] != null && !code[2].isEmpty()) {
                String operand = code[2];
                if (operand.contains(",")) {
                    String[] ops = operand.split(",");
                    line.append(ops[0]).append(", ");
                    if (symbolTable.containsKey(ops[1])) {
                        line.append(symbolTable.get(ops[1]).address);
                    } else {
                        line.append(ops[1]);
                    }
                } else {
                    if (symbolTable.containsKey(operand)) {
                        line.append(symbolTable.get(operand).address);
                    } else {
                        line.append(operand);
                    }
                }
            }

            System.out.println(line);
        }

        System.out.println("\nSymbol Table:");
        for (Symbol symbol : symbolTable.values()) {
            System.out.println(symbol.name + " -> " + symbol.address);
        }
    }

    public static void main(String[] args) {
        initOpcodes();

        // âœ… Statically added input code
        inputLines.add("START 100");
        inputLines.add("READ A");
        inputLines.add("READ B");
        inputLines.add("MOVER AREG, A");
        inputLines.add("SUB AREG, B");
        inputLines.add("STOP");
        inputLines.add("A DS 1");
        inputLines.add("B DS 1");
        inputLines.add("END");

        passOne();
        passTwo();
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------



# Opcode and Register Tables
opcode_table = {
    'START': ('AD', 1),
    'END': ('AD', 2),
    'READ': ('IS', 9),
    'MOVER': ('IS', 4),
    'SUB': ('IS', 2),
    'STOP': ('IS', 0),
    'DS': ('DL', 1)
}

register_table = {
    'AREG': 1
}

# Input Assembly Code
assembly_code = [
    "START 100",
    "READ A",
    "READ B",
    "MOVER AREG, A",
    "SUB AREG, B",
    "STOP",
    "A DS 1",
    "B DS 1",
    "END"
]

# Pass 1: Build Symbol Table & Intermediate Code
symbol_table = {}
intermediate_code = []
location_counter = 0

for line in assembly_code:
    parts = line.strip().split()

    if not parts:
        continue

    if parts[0] == 'START':
        location_counter = int(parts[1])
        intermediate_code.append((location_counter, 'AD', 1, parts[1]))

    elif parts[0] == 'END':
        intermediate_code.append((location_counter, 'AD', 2, ''))
        break

    elif parts[0] == 'READ':
        symbol = parts[1]
        intermediate_code.append((location_counter, 'IS', 9, symbol))
        location_counter += 1

    elif parts[0] in ['MOVER', 'SUB']:
        opcode = parts[0]
        reg, mem = parts[1].split(',')[0], parts[1].split(',')[1]
        reg_code = register_table[reg]
        intermediate_code.append((location_counter, 'IS', opcode_table[opcode][1], reg_code, mem))
        location_counter += 1

    elif parts[0] == 'STOP':
        intermediate_code.append((location_counter, 'IS', 0, ''))
        location_counter += 1

    elif parts[1] == 'DS':
        symbol_table[parts[0]] = location_counter
        intermediate_code.append((location_counter, 'DL', 1, parts[2]))
        location_counter += 1

# Pass 2: Replace Symbols with Addresses
final_intermediate_code = []

for entry in intermediate_code:
    final_entry = []
    for item in entry:
        if isinstance(item, str) and item in symbol_table:
            final_entry.append(symbol_table[item])
        else:
            final_entry.append(item)
    final_intermediate_code.append(tuple(final_entry))

# Output Symbol Table
print("\nSymbol Table:")
for symbol, address in symbol_table.items():
    print(f"{symbol} -> {address}")

# Output Intermediate Code
print("\nIntermediate Code:")
for entry in final_intermediate_code:
    print(entry)
